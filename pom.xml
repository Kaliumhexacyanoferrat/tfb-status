<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>tfb</groupId>
  <artifactId>tfb-status</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <maven.compiler.source>9</maven.compiler.source>
    <maven.compiler.target>9</maven.compiler.target>

    <!-- This is the oldest version of Maven that we've tested this application
         with.  If you have an older version of Maven and you don't want to
         upgrade for whatever reason, feel free to try decreasing this version
         number to match yours.  If you can run "mvn clean package" without
         error after doing that, then it is probably safe to commit the change
         to this version number. -->
    <oldestCompatibleMavenVersion>3.5.0</oldestCompatibleMavenVersion>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <apiguardian.version>1.0.0</apiguardian.version>
    <asm.version>6.1</asm.version>
    <bcrypt.version>0.4</bcrypt.version>
    <caffeine.version>2.6.2</caffeine.version>
    <crawler-commons.version>0.9</crawler-commons.version>
    <error-prone.version>2.2.0</error-prone.version>
    <forbiddenapis.version>2.4.1</forbiddenapis.version>
    <git-commit-id-plugin.version>2.2.4</git-commit-id-plugin.version>
    <greenmail.version>1.5.7</greenmail.version>
    <guava.version>24.1-jre</guava.version>
    <hk2.version>2.5.0-b61</hk2.version>
    <jackson.version>2.9.4</jackson.version>
    <javamail.version>1.6.1</javamail.version>
    <javax-activation.version>1.1.1</javax-activation.version>
    <javax-annotation-api.version>1.3.2</javax-annotation-api.version>
    <javax-inject.version>1</javax-inject.version>
    <jaxb.version>2.3.0</jaxb.version>
    <jaxrs.version>2.1</jaxrs.version>
    <jersey.version>2.26</jersey.version>
    <jsr305.version>3.0.2</jsr305.version>
    <junit-jupiter.version>5.1.0</junit-jupiter.version>
    <junit-platform.version>1.1.0</junit-platform.version>
    <logback.version>1.2.3</logback.version>
    <maven-clean-plugin.version>3.0.0</maven-clean-plugin.version>
    <maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
    <maven-dependency-plugin.version>3.0.2</maven-dependency-plugin.version>
    <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
    <maven-enforcer-plugin.version>1.4.1</maven-enforcer-plugin.version>
    <maven-install-plugin.version>2.5.2</maven-install-plugin.version>
    <maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
    <maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
    <maven-shade-plugin.version>3.1.0</maven-shade-plugin.version>
    <maven-site-plugin.version>3.7</maven-site-plugin.version>
    <!-- We're using Surefire 2.19.1 instead of 2.20(.1) or 2.21.0 because the
         more recent versions are incompatible with JUnit 5.

         Supposedly this is fixed in the next release of JUnit.  See:
         https://github.com/junit-team/junit5/issues/809 -->
    <maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
    <mustache.version>0.9.5</mustache.version>
    <nullaway.version>0.4.1</nullaway.version>
    <plexus-compiler-javac-errorprone.version>2.8.3</plexus-compiler-javac-errorprone.version>
    <slf4j.version>1.7.25</slf4j.version>
    <threeten-extra.version>1.3.2</threeten-extra.version>
    <undertow.version>2.0.3.Final</undertow.version>
    <versions-maven-plugin.version>2.5</versions-maven-plugin.version>
  </properties>

  <!-- We include <prerequisites> for the sake of the versions plugin, which
       provides the very useful "mvn versions:display-dependency-updates"
       command.  That plugin breaks if we remove <prerequisites>.

       Maven warns us that we should remove <prerequisites> and use the enforcer
       plugin instead.  We do also use the enforcer plugin, but we must keep
       <prerequisites> to avoid breaking the versions plugin.

       This is a bug in the versions plugin.  See:
       https://github.com/mojohaus/versions-maven-plugin/issues/48

       Supposedly this is fixed in the next release, version 2.6. -->
  <prerequisites>
    <maven>${oldestCompatibleMavenVersion}</maven>
  </prerequisites>

  <dependencies>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_annotations</artifactId>
      <version>${error-prone.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>${jsr305.version}</version>
    </dependency>
    <dependency>
      <groupId>io.undertow</groupId>
      <artifactId>undertow-core</artifactId>
      <version>${undertow.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.spullara.mustache.java</groupId>
      <artifactId>compiler</artifactId>
      <version>${mustache.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-guava</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mindrot</groupId>
      <artifactId>jbcrypt</artifactId>
      <version>${bcrypt.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.mail</groupId>
      <artifactId>javax.mail</artifactId>
      <version>${javamail.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.activation</groupId>
      <artifactId>activation</artifactId>
      <version>${javax-activation.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>${javax-annotation-api.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>${javax-inject.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.hk2</groupId>
      <artifactId>hk2-api</artifactId>
      <version>${hk2.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.hk2</groupId>
      <artifactId>hk2-locator</artifactId>
      <version>${hk2.version}</version>
      <exclusions>
        <!-- We would rather use the official javax.inject artifact than HK2's
             redistribution of it.  It is not clear why the maintainers of HK2
             decided to create this other javax.inject artifact.-->
        <exclusion>
          <groupId>org.glassfish.hk2.external</groupId>
          <artifactId>javax.inject</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>${caffeine.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apiguardian</groupId>
      <artifactId>apiguardian-api</artifactId>
      <version>${apiguardian.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.threeten</groupId>
      <artifactId>threeten-extra</artifactId>
      <version>${threeten-extra.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
      <version>${jersey.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <version>${jersey.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-sse</artifactId>
      <version>${jersey.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>${jaxb.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>javax.ws.rs-api</artifactId>
      <version>${jaxrs.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.icegreen</groupId>
      <artifactId>greenmail</artifactId>
      <version>${greenmail.version}</version>
      <scope>test</scope>
      <exclusions>
        <!-- Having both JUnit 4 and JUnit 5 on our classpath is an unacceptable
             state of affairs.  We'd rather get rid of GreenMail (and all tests
             that rely on it) than tolerate JUnit 4 on our classpath.  Luckily,
             it appears that we can exclude GreenMail's JUnit 4 dependency
             without breaking the parts of GreenMail that we use. -->
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.github.crawler-commons</groupId>
      <artifactId>crawler-commons</artifactId>
      <version>${crawler-commons.version}</version>
    </dependency>
  </dependencies>

  <build>
    <!-- Give the jar file that we build a nice and short name by default.  The
         "-1.0-SNAPSHOT" part that Maven would put in the jar name otherwise is
         noise to us.  This isn't a library and (at least for now) the version
         doesn't matter because we aren't going to change it. -->
    <finalName>tfb-status</finalName>

    <pluginManagement>
      <plugins>
        <!-- The default version of the Maven dependency plugin seems to be
             unable to execute "mvn dependency:analyze" properly, and specifying
             a more recent version fixes that problem. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${maven-dependency-plugin.version}</version>
          <!-- Bump this plugin's version of ASM up to the latest, because the
               previous version of ASM is incompatible with Java 9.  We should
               be able to remove this when a future version of the dependency
               plugin is released.

               For more information, see:
               https://issues.apache.org/jira/browse/MDEP-559 -->
          <dependencies>
            <dependency>
              <groupId>org.ow2.asm</groupId>
              <artifactId>asm</artifactId>
              <version>${asm.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <!-- These are other commonly used plugins that the Maven versions
             plugin warns us about if we don't specify their versions.  We're
             mainly specifying the versions here to avoid the warnings, but
             supposedly this makes the behavior of these plugins more reliable
             across installations as well. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${maven-clean-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${maven-deploy-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven-install-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven-jar-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven-resources-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>${maven-site-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
          <dependencies>
            <dependency>
              <groupId>org.junit.platform</groupId>
              <artifactId>junit-platform-surefire-provider</artifactId>
              <version>${junit-platform.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <!-- For consistency, specify *all* plugin versions in the
             <pluginManagement> section, including the plugins that we also
             configure in the <plugins> section. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${maven-enforcer-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
          <dependencies>
            <dependency>
              <groupId>org.codehaus.plexus</groupId>
              <artifactId>plexus-compiler-javac-errorprone</artifactId>
              <version>${plexus-compiler-javac-errorprone.version}</version>
            </dependency>
            <dependency>
              <groupId>com.google.errorprone</groupId>
              <artifactId>error_prone_core</artifactId>
              <version>${error-prone.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${maven-shade-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>de.thetaphi</groupId>
          <artifactId>forbiddenapis</artifactId>
          <version>${forbiddenapis.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${versions-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>pl.project13.maven</groupId>
          <artifactId>git-commit-id-plugin</artifactId>
          <version>${git-commit-id-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Helps to ensure that the current environment has a recent enough
           version of Maven that is compatible with this project. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <configuration>
          <rules>
            <requireMavenVersion>
              <version>${oldestCompatibleMavenVersion}</version>
            </requireMavenVersion>
          </rules>
        </configuration>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Make the output of "mvn versions display-dependency-updates" more
           useful by ignoring versions that we don't want to use. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <configuration>
          <rulesUri>file://${basedir}/config/maven-version-rules.xml</rulesUri>
        </configuration>
      </plugin>

      <!-- Ignore false flags from "mvn dependency:analyze" for a few specific
           dependencies. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <ignoredUnusedDeclaredDependencies>

            <!-- Without the logback-classic dependency, we wouldn't have any
                 implementation of the slf4j API, and so all of our log
                 statements throughout the application would do nothing. -->
            <ignoredUnusedDeclaredDependency>ch.qos.logback:logback-classic</ignoredUnusedDeclaredDependency>

            <!-- Without the hk2-locator dependency, we wouldn't be able to
                 create instances of the ServiceLocator class at runtime, and so
                 our application would fail almost immediately upon startup. -->
            <ignoredUnusedDeclaredDependency>org.glassfish.hk2:hk2-locator</ignoredUnusedDeclaredDependency>

            <!-- Without the junit-jupiter-engine dependency, our tests wouldn't
                 run at all. -->
            <ignoredUnusedDeclaredDependency>org.junit.jupiter:junit-jupiter-engine</ignoredUnusedDeclaredDependency>

            <!-- Without the apiguardian-api dependency, we would get warnings
                 about missing class files when compiling our tests. -->
            <ignoredUnusedDeclaredDependency>org.apiguardian:apiguardian-api</ignoredUnusedDeclaredDependency>

            <!-- Without the jersey-hk2 dependency, the Jersey client would fail
                 to initialize, and so most of our tests would fail. -->
            <ignoredUnusedDeclaredDependency>org.glassfish.jersey.inject:jersey-hk2</ignoredUnusedDeclaredDependency>

            <!-- Without the jaxb-api dependency, we would get a huge number of
                 warnings with stack traces when running tests, which would
                 obscure more useful test output (Jersey refers to classes from
                 the javax.xml.bind package but doesn't include that package as
                 a Maven dependency, and those classes are no longer in the JDK
                 as of Java 9). -->
            <ignoredUnusedDeclaredDependency>javax.xml.bind:jaxb-api</ignoredUnusedDeclaredDependency>

          </ignoredUnusedDeclaredDependencies>
        </configuration>
      </plugin>

      <!-- When we build this project, we generate a git.properties file that
           describes the current state of the git repository.  This helps us
           figure out which version of the code is contained in the build. -->
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
        </configuration>
      </plugin>

      <!-- We enable the standard warnings from javac that are (for some strange
           reason) disabled by default.  We also add in Error Prone for more
           static analysis.  Error Prone may emit compilation errors (as opposed
           to warnings) depending on the severity of the problems it finds. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <encoding>UTF-8</encoding>
          <compilerId>javac-with-errorprone</compilerId>
          <forceJavacCompilerUse>true</forceJavacCompilerUse>
          <showDeprecation>true</showDeprecation>
          <showWarnings>true</showWarnings>
          <annotationProcessorPaths>
            <path>
              <groupId>com.uber.nullaway</groupId>
              <artifactId>nullaway</artifactId>
              <version>${nullaway.version}</version>
            </path>
          </annotationProcessorPaths>
          <compilerArgs>
            <arg>-Xlint:all</arg>

            <!-- Sometimes it's interesting to see what Error Prone's
                 experimental checks tell us.  The experimental checks are
                 disabled by default because they're often broken (they throw an
                 exception when scanning our code) or wrong (they give bad
                 advice).  Every once in a while, though, they say something
                 useful.

                 Uncomment this <arg> to enable the experimental checks. -->
            <!--
            <arg>-XepAllDisabledChecksAsWarnings</arg>
            -->

            <!-- We disagree that adding a "@Var" annotation to every
                 non-constant variable would make our code more readable.  (We
                 also disagree that adding a "final" modifier to every constant
                 variable would make our code more readable.) -->
            <arg>-Xep:Var:OFF</arg>

            <!-- We don't think that every method that can be static should be
                 static.  For example, if a method *sounds* like something an
                 instance would do, then it should probably be non-static even
                 if it doesn't refer to instance-level state. -->
            <arg>-Xep:MethodCanBeStatic:OFF</arg>

            <!-- Enable NullAway, which is a plugin for Error Prone that offers
                 additional checks against nullness contracts. -->
            <arg>-Xep:NullAway:ERROR</arg>
            <arg>-XepOpt:NullAway:AnnotatedPackages=tfb.status</arg>

          </compilerArgs>
        </configuration>
      </plugin>

      <!-- Detects if we use certain discouraged APIs and fails the build if so.
           We started using this plugin because it catches implicit use of the
           default locale, which may be inconsistent across environments.  The
           behavior of String.format(String, Object[]) depends on the default
           locale, for example.  We meant to avoid APIs like this but were using
           them accidentally. -->
      <plugin>
        <groupId>de.thetaphi</groupId>
        <artifactId>forbiddenapis</artifactId>
        <version>${forbiddenapis.version}</version>
        <configuration>
          <failOnUnsupportedJava>true</failOnUnsupportedJava>
          <bundledSignatures>
            <bundledSignature>jdk-unsafe</bundledSignature>
            <bundledSignature>jdk-deprecated</bundledSignature>
            <bundledSignature>jdk-non-portable</bundledSignature>
          </bundledSignatures>
        </configuration>
        <executions>
          <execution>
            <!-- This plugin analyzes compiled bytecode, so we want it to
                 execute after all of our code (include test sources) has been
                 compiled and before we allow any of our code to be packaged
                 into a jar file. -->
            <phase>prepare-package</phase>
            <goals>
              <goal>check</goal>
              <goal>testCheck</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- We package the application into a fat jar file containing both our
           application and all of its dependencies.  This jar file can be
           produced by running the command "mvn clean package" from the root
           directory of the project. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <configuration>
          <createDependencyReducedPom>false</createDependencyReducedPom>
          <filters>
            <filter>
              <artifact>*:*</artifact>
              <excludes>
                <exclude>META-INF/*.SF</exclude>
                <exclude>META-INF/*.DSA</exclude>
                <exclude>META-INF/*.RSA</exclude>
              </excludes>
            </filter>
          </filters>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>tfb.status.bootstrap.Main</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
