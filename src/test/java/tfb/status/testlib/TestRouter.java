package tfb.status.testlib;

import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.handlers.PathHandler;
import java.util.Objects;
import java.util.UUID;
import javax.inject.Inject;
import javax.inject.Provider;
import javax.inject.Singleton;
import tfb.status.handler.Router;
import tfb.status.undertow.extensions.LazyHandler;

/**
 * Replaces {@link Router} during tests only.  If the path of the incoming
 * request is a path generated by {@link #addHandler(HttpHandler)}, then that
 * handler is invoked.  Otherwise the {@link Router} is invoked.
 */
@Singleton
public final class TestRouter implements HttpHandler {
  private final PathHandler pathHandler;

  @Inject
  public TestRouter(Provider<Router> defaultRouter) {
    pathHandler = new PathHandler(new LazyHandler(defaultRouter));
  }

  @Override
  public void handleRequest(HttpServerExchange exchange) throws Exception {
    pathHandler.handleRequest(exchange);
  }

  /**
   * Adds the specified HTTP handler at a new and distinct path.
   *
   * @param handler the HTTP handler to be assigned a path
   * @return the path assigned to the HTTP handler
   */
  public String addHandler(HttpHandler handler) {
    Objects.requireNonNull(handler);
    String path = "/test/" + UUID.randomUUID().toString();
    pathHandler.addExactPath(path, handler);
    return path;
  }
}
